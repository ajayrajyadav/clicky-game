{"version":3,"sources":["components/Container/Container.js","components/GameCard/GameCard.js","components/GameInstructions/GameInstructions.js","components/GameMessage/GameMessage.js","components/NavBar/NavBar.js","components/Footer/Footer.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","GameCard","role","aria-label","concat","animate","style","backgroundImage","image","onClick","handleClick","id","GameInstructions","Jumbotron","background-image","message","GameMessage","state","animating","addAnimation","_this","updatedMessage","prevProps","newState","score","topScore","this","console","log","setState","_this2","onAnimationEnd","Component","Navbar","components_GameMessage_GameMessage","Footer","src","href","target","Game","data","shuffleArray","sort","b","Math","random","resetTheArray","newArray","resetData","map","element","Object","objectSpread","clicked","rightGuess","newScore","newTopScore","max","animation","wrongGuess","gameCardClick","guessedRight","NavBar_NavBar","components_GameInstructions_GameInstructions","components_Container_Container","components_GameCard_GameCard","key","components_Footer_Footer","App","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6453dcd.chunk.js","sourcesContent":["import React from \"react\";\nimport './Container.css';\n\nconst Container = props => <main className='container'>{props.children}</main>;\nexport default Container;","import React from \"react\";\nimport \"./GameCard.css\";\n\nconst GameCard = props => (\n    <div \n        role=\"img\" \n        aria-label=\"click item\" \n        className={`gameCard ${props.animate? \"animated shake\": \"\"}`}\n        style={{ backgroundImage: `url(\"${props.image}\")` }}\n        onClick={() => props.handleClick(props.id)}\n    >\n    </div>\n)\n\nexport default GameCard;","import React from \"react\";\nimport { Jumbotron } from 'reactstrap';\nimport \"./GameInstructions.css\";\n\nconst GameInstructions = (props) => (\n    <div className=\"jumbo\">\n        <Jumbotron style = {{'background-image': `url(assets/images/mario-background.gif)`}}>\n            <h3 className=\" animated fadeInDown instructions\">{props.message}</h3>\n        </Jumbotron>\n    </div>\n);\n\nexport default GameInstructions\n","import React, {Component} from \"react\";\nimport \"./GameMessage.css\"\n\nclass GameMessage extends Component {\n    state = {\n        animating: false,\n        message: ''\n    }\n\n    componentDidUpdate(prevProps) {\n        let newState = {\n            animating: true \n        }\n\n        const {score, topScore} = prevProps;\n\n        if(score === 0 && topScore === 0){\n            newState.message = \"\";\n        }else if(score !== 0 && topScore > 0){\n            newState.message = \"correct\"\n        }else{\n            newState.message = \"incorrect\"\n        }\n\n        if (score !== this.props.score || this.state.message !== newState.message) {\n            console.log(newState);\n            this.setState(newState);\n        }\n    }\n\n\n    addAnimation = () => {\n        if(this.state.message === 'correct'){\n            return 'animated rubberBand'\n        }else if(this.state.message === 'incorrect'){\n            return 'animated wobble'\n        }else{\n            return '';\n        }\n    }\n\n    updatedMessage = () => {\n        if(this.state.message === 'correct'){\n            return 'You Guessed right'\n        }else if(this.state.message === 'incorrect'){\n            return 'W R O N G'\n        }else{\n            return 'Click An Image To Begin';\n        }\n    }\n\n    // messageObj = () => {\n    //     if(this.state.message === 'correct'){\n    //         return {\n    //             updatedMessage: 'You Guessed right',\n    //             updateAnimation: 'animated pulse'\n    //         }\n    //     }else if(this.state.message === 'incorrect'){\n    //         return {\n    //             updatedMessage: 'W R O N G',\n    //             updateAnimation: 'animated wobble'\n    //         } \n    //     }else{\n    //         return {\n    //             updatedMessage: 'Click Character To Begin',\n    //             updateAnimation: ''\n    //         }\n    //     }\n    // }\n\n\n    render(){\n        return(\n            <li\n                className={`\n                gameMessage \n                ${this.state.animating? this.addAnimation(): \"\"} \n                ${this.state.animating? this.state.message: \"black\"}`}\n                id={`${this.state.message}`}\n                onAnimationEnd={() => this.setState()}\n            >\n                {this.updatedMessage()}\n            </li>\n        );\n    }\n}\n\nexport default GameMessage;","import React from \"react\";\nimport './NavBar.css';\nimport GameMessage from '../GameMessage';\n\nconst Navbar = (props) => {\n    return(\n        <div className='header'>\n            <ul>\n                <li><h2 className='title animated shake'>Clicky-Game</h2></li>\n                <GameMessage score={props.score} topScore={props.topScore} />\n                <li id='score'>Score: {props.score} | Top Score: {props.topScore}</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <div className=\"bottom\">\n            <ul id='footer-list'>\n                <li><span><img className='logo' id=\"reactLogo\" src=\"assets/images/react-logo.png\"/></span> Clicky Game!</li>\n                <li>Â© 2018 Evan Tucker</li>\n                <li><a href=\"https://ajayrajyadav.github.io/clicky-game/\" target=\"blank\"><span><img className='logo' src=\"assets/images/github.png\"/></span> Github</a></li>\n            </ul>\n        </div>\n    </footer>\n)\n\nexport default Footer;","import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport GameInstructions from \"../GameInstructions\";\nimport NavBar from \"../NavBar\";\nimport Footer from \"../Footer\"\nimport data from \"../../data.json\";\n\nclass Game extends Component {\n    state = {\n        data,\n        score: 0,\n        topScore: 0,\n        message: \"Click on an image to earn a point, don't click on it more than once!\"\n    };\n    \n\n    componentDidMount() {\n        this.setState({ data: this.shuffleArray(this.state.data) });\n    }\n\n    shuffleArray = (data) => {\n        return data.sort(function (a, b) { return 0.5 - Math.random() });\n    }\n\n    resetTheArray = newArray => {\n        let resetData = data.map(element => ({ ...element, clicked: false }));\n        return (this.shuffleArray(resetData));\n    }\n\n    rightGuess = newArray => {\n        let newScore = this.state.score;\n        newScore++;\n        let newTopScore = Math.max(newScore, this.state.topScore);\n        this.setState({\n            data: this.shuffleArray(newArray),\n            score: newScore,\n            topScore: newTopScore,\n            animation: \"animation hinge\"\n        })\n    }\n\n    wrongGuess = newArray => {\n        this.setState({\n            data: this.resetTheArray(newArray),\n            score: 0\n        })\n    }\n\n    gameCardClick = id => {\n        let guessedRight = false;\n        const newArray = this.state.data.map(element => {\n            if (element.id === id && !element.clicked) {\n                element.clicked = true;\n                guessedRight = true;\n            }\n            return element\n        })\n        if (guessedRight) {\n            this.rightGuess(newArray)\n        } else {\n            this.wrongGuess(newArray);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\" animated fadeIn\">\n                <NavBar score={this.state.score} topScore={this.state.topScore}></NavBar>\n                <GameInstructions message={this.state.message}></GameInstructions>\n                <Container>\n                    {\n                        this.state.data.map(element => (\n                            <div className=\"animated rotateIn\">\n                                <GameCard\n                                    key={element.id}\n                                    id={element.id}\n                                    image={element.image}\n                                    animate={!this.state.score && this.state.topScore}\n                                    clicked={element.clicked}\n                                    handleClick={this.gameCardClick}\n                                ></GameCard>\n                            </div>\n                        ))\n                    }\n                </Container>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game\" \n\nconst App = () => <Game/>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}